.. Note, this was autogenerated on Sun Feb  3 20:05:50 CET 2019, all changes will vanish...

Available JSON-RPC methods
==========================


version
-------

Get the version of conferatur

:return str: Conferatur version

normalisation
-------------

Apply normalisation

:param str text: The text to normalise
:param list normalisers: A list of lists of normalisers to be applied
:return str: Normalised text

normalisation.list
------------------

Get a list of available core normalisers

:return object: With key being the normaliser name, and value its description

normalisation.alphanumeric
--------------------------

Simple alphanumeric filter

normalisation.alphanumericunicode
---------------------------------

Simple alphanumeric filter, takes into account all unicode alphanumeric characters

normalisation.config
--------------------

Use config notation to define normalisation rules. This notation is a list of normalisers, one per line, with optional arguments (separated by a space).

The normalisers can be any of the core normalisers, or you can refer to your own normaliser class (like you would use in a python import, eg. `my.own.package.MyNormaliserClass`).

Additional rules:
  - Normaliser names are case-insensitive.
  - Arguments MAY be wrapped in double quotes.
  - If an argument contains a space, newline or double quote, it MUST be wrapped in double quotes.
  - A double quote itself is represented in this quoted argument as two double quotes: `""`.

The normalisation rules are applied top-to-bottom and follow this format:

.. code-block:: none

    Normaliser1 arg1 "arg 2"
    # This is a comment

    Normaliser2
    # (Normaliser2 has no arguments)
    Normaliser3 "This is argument 1
    Spanning multiple lines
    " "argument 2"
    Normaliser4 "argument with double quote ("")"

normalisation.file
------------------

Read one per line and pass it to the given normaliser

normalisation.localisedfile
---------------------------

Reads and applies normalisation rules from a locale-based file, it will automagically determine the "best fit" for a given locale, if one is available.

:param normaliser: str|class Normaliser name or class
:param locale: Which locale to search for
:param path: Location of available locale files
:param encoding: str The file encoding

normalisation.lowercase
-----------------------

Lowercase the text

normalisation.regexreplace
--------------------------

Simple regex replace. By default the pattern is interpreted
case-sensitive.

Case-insensitivity is supported by adding inline modifiers.

You might want to use capturing groups to preserve the case. When replacing a character not captured, the information about its case is lost...

Eg. would replace "HAHA! Hahaha!" to "HeHe! Hehehe!":

 +------------------+-------------+
 | search           | replace     |
 +==================+=============+
 | :code:`(?i)(h)a` | :code:`\1e` |
 +------------------+-------------+


No regex flags are set by default, you can set them yourself though in the regex, and combine them at will, eg. multiline, dotall and ignorecase.

Eg. would replace "New<CRLF>line" to "newline":

 +------------------------+------------------+
 | search                 | replace          |
 +========================+==================+
 | :code:`(?msi)new.line` | :code:`newline`  |
 +------------------------+------------------+

normalisation.replace
---------------------

Simple search replace

normalisation.replacewords
--------------------------

Simple search replace that only replaces "words", the first letter will be
checked case insensitive as well with preservation of case..

normalisation.unidecode
-----------------------

Unidecode characters to ASCII form, see `Python's Unidecode package <https://pypi.org/project/Unidecode>`_ for more info.

help
----

Returns available api methods

:return object: With key being the method name, and value its description

